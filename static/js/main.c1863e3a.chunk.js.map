{"version":3,"sources":["common/PageContainer.tsx","app/hooks.ts","app/actions.ts","reducers/currentUserReducer.ts","pages/Login.tsx","common/AppBar.tsx","reducers/employeesReducer.ts","common/Snackbar.tsx","pages/List.tsx","pages/Detail.tsx","App.tsx","utils/localStorageUtils.ts","sagas/loginSaga.ts","services/fetchEmployeesService.ts","sagas/employeesSaga.ts","sagas/logoutSaga.ts","sagas/index.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","Copyright","Typography","variant","color","align","Date","getFullYear","PageContainer","children","classes","Container","component","maxWidth","CssBaseline","className","Box","mt","useAppDispatch","useDispatch","useAppSelector","useSelector","LOGIN_USER","LOGOUT_USER","FETCH_EMPLOYEES","currentUserSlice","createSlice","name","initialState","user","reducers","setCurrentUser","state","action","payload","loginError","console","log","error","selectCurrentUser","actions","currentUser","selectCurrentUserError","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","dispatch","React","useState","username","setUsername","password","setPassword","Avatar","TextField","required","fullWidth","id","label","autoComplete","autoFocus","value","onChange","event","target","type","FormHelperText","Button","onClick","createStyles","root","flexGrow","menuButton","marginRight","title","CommonAppBar","showBack","history","useHistory","AppBar","position","Toolbar","IconButton","edge","goBack","employeesSlice","list","setEmployees","undefined","fetchEmployeesError","selectEmployees","employees","selectEmployeesError","Alert","props","elevation","CommonSnackbar","message","open","setOpen","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","background","FlatList","employeesFetchError","search","setSearch","localEmployees","setLocalEmployees","useEffect","length","filter","eachEmployee","employee_name","toLocaleLowerCase","includes","List","map","index","ListItem","button","push","ListItemText","SingleDetail","params","useParams","employee","find","parseInt","employeeId","employee_age","employee_salary","profile_image","App","path","localStorageKey","saveToLocalStorage","serializedState","key","localStorage","setItem","err","loginSaga","users","sampleUsers","put","check","eachUser","rest","JSON","stringify","fetchEmployeesService","fetch","method","then","response","json","employeesSaga","call","data","sampleEmployees","logoutSaga","removeItem","rootSaga","takeLatest","sagaMiddleware","createSagaMiddleware","persistedState","getItem","parse","loadFromLocalStorage","rootReducer","combineReducers","currentUserReducer","employeesReducer","store","createStore","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c1863e3a.chunk.js","sourcesContent":["import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}))\n\nconst Copyright = () => {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {`Copyright © Patrick Ceasar Munoz ${new Date().getFullYear()}.`}\n        </Typography>\n    )\n}\n\nconst PageContainer: React.FC = ({ children }) => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>{children}</div>\n            <Box mt={8}>\n                <Copyright />\n            </Box>\n        </Container>\n    )\n}\n\nexport default PageContainer\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport { AnyAction, Dispatch } from 'redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): Dispatch<AnyAction> => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export const LOGIN_USER = 'LOGIN_USER'\nexport const LOGOUT_USER = 'LOGOUT_USER'\nexport const FETCH_EMPLOYEES = 'FETCH_EMPLOYEES'\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../app/store'\nimport { User } from '../model/user'\n\ninterface CurrentUserState {\n    user: User | null\n    error?: string\n}\n\nconst initialState: CurrentUserState = {\n    user: null,\n}\n\nexport const currentUserSlice = createSlice({\n    name: 'currentUser',\n    initialState,\n    reducers: {\n        setCurrentUser: (state, action: PayloadAction<User | null>) => {\n            state.user = action.payload\n        },\n        loginError: (state, action: PayloadAction<string>) => {\n            console.log('error')\n            state.error = action.payload\n        },\n    },\n})\n\nexport const { setCurrentUser } = currentUserSlice.actions\n\nexport const selectCurrentUser = (state: RootState): User | null => state.currentUser.user\nexport const selectCurrentUserError = (state: RootState): string | undefined =>\n    state.currentUser.error\n\nexport default currentUserSlice.reducer\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PageContainer from '../common/PageContainer'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { LOGIN_USER } from '../app/actions'\nimport { selectCurrentUserError } from '../reducers/currentUserReducer'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}))\n\nconst Login: React.FC = () => {\n    const classes = useStyles()\n\n    const dispatch = useAppDispatch()\n\n    const error = useAppSelector(selectCurrentUserError)\n\n    const [username, setUsername] = React.useState<string>('')\n    const [password, setPassword] = React.useState<string>('')\n\n    const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setUsername(event.target.value)\n    }\n\n    const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value)\n    }\n\n    const handleSubmit = () => {\n        dispatch({ type: LOGIN_USER, payload: { username, password } })\n    }\n\n    return (\n        <PageContainer>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n                Login\n            </Typography>\n            <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"Username\"\n                name=\"username\"\n                autoComplete=\"username\"\n                autoFocus\n                value={username}\n                onChange={handleUsernameChange}\n                error={!!error}\n            />\n            <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={handlePasswordChange}\n                error={!!error}\n            />\n            {!!error && <FormHelperText error>{error}</FormHelperText>}\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.submit}\n                onClick={handleSubmit}\n            >\n                Login\n            </Button>\n        </PageContainer>\n    )\n}\n\nexport default Login\n","import React from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport { useAppDispatch } from '../app/hooks'\nimport { LOGOUT_USER } from '../app/actions'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport IconButton from '@material-ui/core/IconButton'\nimport { useHistory } from 'react-router-dom'\n\ninterface CommonAppBarProps {\n    name: string\n    showBack?: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n)\n\nconst CommonAppBar: React.FC<CommonAppBarProps> = ({ name, showBack }) => {\n    const classes = useStyles()\n\n    const dispatch = useAppDispatch()\n    const history = useHistory()\n\n    const handleLogout = () => {\n        dispatch({ type: LOGOUT_USER })\n    }\n\n    const handleBack = () => {\n        history.goBack()\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    {showBack && (\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\"\n                            onClick={handleBack}\n                        >\n                            <ArrowBackIcon />\n                        </IconButton>\n                    )}\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {name}\n                    </Typography>\n                    <Button color=\"inherit\" onClick={handleLogout}>\n                        Logout\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default CommonAppBar\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../app/store'\nimport { Employee } from '../model/employee'\n\ninterface EmployeesState {\n    list: Employee[]\n    error?: string\n}\n\nconst initialState: EmployeesState = {\n    list: [],\n}\n\nexport const employeesSlice = createSlice({\n    name: 'employees',\n    initialState,\n    reducers: {\n        setEmployees: (state, action: PayloadAction<Employee[]>) => {\n            state.list = action.payload\n            state.error = undefined\n        },\n        fetchEmployeesError: (state, action: PayloadAction<string>) => {\n            state.error = action.payload\n        },\n    },\n})\n\nexport const { setEmployees } = employeesSlice.actions\n\nexport const selectEmployees = (state: RootState): Employee[] => state.employees.list\nexport const selectEmployeesError = (state: RootState): string | undefined => state.employees.error\n\nexport default employeesSlice.reducer\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\ninterface CommonSnackbarProps {\n    message: string\n}\n\nconst CommonSnackbar: React.FC<CommonSnackbarProps> = ({ message }) => {\n    const [open, setOpen] = React.useState(true)\n\n    const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n            >\n                <Alert severity=\"error\" onClose={handleClose}>\n                    {message}\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\n\nexport default CommonSnackbar\n","import React from 'react'\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport PageContainer from '../common/PageContainer'\nimport TextField from '@material-ui/core/TextField'\nimport CommonAppBar from '../common/AppBar'\nimport { selectEmployees, selectEmployeesError } from '../reducers/employeesReducer'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { FETCH_EMPLOYEES } from '../app/actions'\nimport CommonSnackbar from '../common/Snackbar'\nimport { useHistory } from 'react-router-dom'\nimport { Employee } from '../model/employee'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            backgroundColor: theme.palette.background.paper,\n        },\n    }),\n)\n\nconst FlatList: React.FC = () => {\n    const classes = useStyles()\n\n    const history = useHistory()\n\n    const employees = useAppSelector(selectEmployees)\n    const employeesFetchError = useAppSelector(selectEmployeesError)\n    const dispatch = useAppDispatch()\n\n    const [search, setSearch] = React.useState<string>('')\n    const [localEmployees, setLocalEmployees] = React.useState<Employee[]>([])\n\n    const handleEmployeeClick = (id: number) => {\n        history.push(`/react-list/${id}`)\n    }\n\n    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(event.target.value)\n    }\n\n    React.useEffect(() => {\n        if (employees.length === 0) {\n            dispatch({ type: FETCH_EMPLOYEES })\n        }\n    }, [dispatch, employees])\n\n    React.useEffect(() => {\n        if (employees.length > 0) {\n            if (search) {\n                setLocalEmployees(\n                    employees.filter((eachEmployee) =>\n                        eachEmployee.employee_name.toLocaleLowerCase().includes(search),\n                    ),\n                )\n            } else {\n                setLocalEmployees(employees)\n            }\n        }\n    }, [search, employees])\n\n    return (\n        <PageContainer>\n            {!!employeesFetchError && <CommonSnackbar message={employeesFetchError} />}\n            <div className={classes.root}>\n                <CommonAppBar name=\"List\" />\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    name=\"search\"\n                    label=\"Search List\"\n                    id=\"search\"\n                    value={search}\n                    onChange={handleSearchChange}\n                />\n                <List component=\"nav\">\n                    {localEmployees.map((eachEmployee, index) => {\n                        return (\n                            <ListItem\n                                key={index}\n                                button\n                                onClick={() => handleEmployeeClick(eachEmployee.id)}\n                            >\n                                <ListItemText>{eachEmployee.employee_name}</ListItemText>\n                            </ListItem>\n                        )\n                    })}\n                </List>\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default FlatList\n","import React from 'react'\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport PageContainer from '../common/PageContainer'\nimport CommonAppBar from '../common/AppBar'\nimport { selectEmployees } from '../reducers/employeesReducer'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { FETCH_EMPLOYEES } from '../app/actions'\nimport { useParams } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            backgroundColor: theme.palette.background.paper,\n        },\n    }),\n)\n\nconst SingleDetail: React.FC = () => {\n    const classes = useStyles()\n    const params = useParams<{ employeeId: string }>()\n    const dispatch = useAppDispatch()\n\n    const employees = useAppSelector(selectEmployees)\n\n    const employee = employees?.find(\n        (eachEmployee) => eachEmployee.id === parseInt(params.employeeId),\n    )\n\n    React.useEffect(() => {\n        if (employees.length === 0) {\n            dispatch({ type: FETCH_EMPLOYEES })\n        }\n    }, [dispatch, employees])\n\n    return (\n        <PageContainer>\n            <div className={classes.root}>\n                <CommonAppBar name=\"Detail\" showBack />\n                <List component=\"nav\">\n                    <ListItem>\n                        <ListItemText>Name: {employee?.employee_name}</ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>Age: {employee?.employee_age}</ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>Salary: {employee?.employee_salary}</ListItemText>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText>Image: {employee?.profile_image}</ListItemText>\n                    </ListItem>\n                </List>\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default SingleDetail\n","import React from 'react'\nimport './App.css'\nimport Login from './pages/Login'\nimport { useAppSelector } from './app/hooks'\nimport { selectCurrentUser } from './reducers/currentUserReducer'\nimport FlatList from './pages/List'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport SingleDetail from './pages/Detail'\n\nconst App: React.FC = () => {\n    const user = useAppSelector(selectCurrentUser)\n    console.log('user', user)\n    if (!user) {\n        return <Login />\n    }\n\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/react-list/:employeeId\">\n                    <SingleDetail />\n                </Route>\n                <Route path=\"/\">\n                    <FlatList />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App\n","export const localStorageKey = 'react-list-currentUser'\n\nexport const loadFromLocalStorage = (key: string = localStorageKey) => {\n    try {\n        const serializedState = localStorage.getItem(key)\n\n        if (serializedState === null) {\n            return undefined\n        }\n        return JSON.parse(serializedState)\n    } catch (err) {\n        return undefined\n    }\n}\n\nexport const saveToLocalStorage = (serializedState: string, key: string = localStorageKey) => {\n    try {\n        localStorage.setItem(key, serializedState)\n    } catch (err) {\n        // ignore errors\n    }\n}\n","import { put } from 'redux-saga/effects'\nimport sampleUsers from '../sample-user.json'\nimport { PayloadAction } from '@reduxjs/toolkit'\nimport { saveToLocalStorage } from '../utils/localStorageUtils'\n\nexport function* loginSaga(action: PayloadAction<{ username: string; password: string }>) {\n    // const response = yield call(fetchEmployeesService)\n\n    // console.log('sg', response)\n\n    const users = sampleUsers\n\n    if (!action.payload.username && !action.payload.password) {\n        yield put({ type: 'currentUser/loginError', payload: 'Invalid username and password' })\n    } else {\n        const check = users.filter(\n            (eachUser) =>\n                eachUser.username === action.payload.username &&\n                eachUser.password === action.payload.password,\n        )\n\n        if (check.length === 1) {\n            const { password, ...rest } = check[0]\n            saveToLocalStorage(JSON.stringify({ ...rest }))\n            yield put({ type: 'currentUser/setCurrentUser', payload: check[0] })\n        } else {\n            yield put({ type: 'currentUser/loginError', payload: 'Invalid username and password' })\n        }\n    }\n}\n","export const fetchEmployeesService = () => {\n    const EMPLOYEE_API_ENDPOINT = 'http://dummy.restapiexample.com/api/v1/employees'\n\n    const parameters = {\n        method: 'GET',\n    }\n\n    return fetch(EMPLOYEE_API_ENDPOINT, parameters)\n        .then((response) => {\n            console.log(response)\n            return response.json()\n        })\n        .then((json) => {\n            return json\n        })\n}\n","import { put, call } from 'redux-saga/effects'\nimport { fetchEmployeesService } from '../services/fetchEmployeesService'\nimport sampleEmployees from '../sample-employees.json'\n\nexport function* employeesSaga() {\n    try {\n        const response = yield call(fetchEmployeesService)\n        const { data } = response\n        console.log('response', response)\n        yield put({ type: 'employees/setEmployees', payload: data })\n    } catch (error) {\n        const { data } = sampleEmployees\n        console.log('local', data)\n        console.log('error', error)\n        yield put({ type: 'employees/setEmployees', payload: data })\n        yield put({\n            type: 'employees/fetchEmployeesError',\n            payload: 'Error on fetching. Loading local employees data instead',\n        })\n    }\n}\n","import { put } from 'redux-saga/effects'\nimport { localStorageKey } from '../utils/localStorageUtils'\n\nexport function* logoutSaga() {\n    localStorage.removeItem(localStorageKey)\n    yield put({ type: 'currentUser/setCurrentUser', payload: null })\n}\n","import { FETCH_EMPLOYEES, LOGIN_USER, LOGOUT_USER } from '../app/actions'\nimport { takeLatest } from 'redux-saga/effects'\nimport { loginSaga } from './loginSaga'\nimport { employeesSaga } from './employeesSaga'\nimport { logoutSaga } from './logoutSaga'\n\nexport function* rootSaga() {\n    yield takeLatest(LOGIN_USER, loginSaga)\n    yield takeLatest(LOGOUT_USER, logoutSaga)\n    yield takeLatest(FETCH_EMPLOYEES, employeesSaga)\n}\n","// ...\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport employeesReducer from '../reducers/employeesReducer'\nimport currentUserReducer from '../reducers/currentUserReducer'\nimport { rootSaga } from '../sagas'\nimport { loadFromLocalStorage } from '../utils/localStorageUtils'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst persistedState = {\n    currentUser: { user: loadFromLocalStorage() },\n    employees: { list: [] },\n}\n\nconst rootReducer = combineReducers({\n    currentUser: currentUserReducer,\n    employees: employeesReducer,\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\n\nexport const store = createStore(rootReducer, persistedState, applyMiddleware(sagaMiddleware))\n\nsagaMiddleware.run(rootSaga)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}